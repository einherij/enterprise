// Code generated by MockGen. DO NOT EDIT.
// Source: ../app.go

// Package mock_enterprise is a generated GoMock package.
package mock_enterprise

import (
	reflect "reflect"

	enterprise "github.com/einherij/enterprise"
	gomock "github.com/golang/mock/gomock"
)

// MockApplication is a mock of Application interface.
type MockApplication struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationMockRecorder
}

// MockApplicationMockRecorder is the mock recorder for MockApplication.
type MockApplicationMockRecorder struct {
	mock *MockApplication
}

// NewMockApplication creates a new mock instance.
func NewMockApplication(ctrl *gomock.Controller) *MockApplication {
	mock := &MockApplication{ctrl: ctrl}
	mock.recorder = &MockApplicationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplication) EXPECT() *MockApplicationMockRecorder {
	return m.recorder
}

// RegisterOnRun mocks base method.
func (m *MockApplication) RegisterOnRun(f func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOnRun", f)
}

// RegisterOnRun indicates an expected call of RegisterOnRun.
func (mr *MockApplicationMockRecorder) RegisterOnRun(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOnRun", reflect.TypeOf((*MockApplication)(nil).RegisterOnRun), f)
}

// RegisterOnShutdown mocks base method.
func (m *MockApplication) RegisterOnShutdown(f func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterOnShutdown", f)
}

// RegisterOnShutdown indicates an expected call of RegisterOnShutdown.
func (mr *MockApplicationMockRecorder) RegisterOnShutdown(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterOnShutdown", reflect.TypeOf((*MockApplication)(nil).RegisterOnShutdown), f)
}

// RegisterRunner mocks base method.
func (m *MockApplication) RegisterRunner(runner enterprise.Runner) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterRunner", runner)
}

// RegisterRunner indicates an expected call of RegisterRunner.
func (mr *MockApplicationMockRecorder) RegisterRunner(runner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRunner", reflect.TypeOf((*MockApplication)(nil).RegisterRunner), runner)
}

// Run mocks base method.
func (m *MockApplication) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockApplicationMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockApplication)(nil).Run))
}
